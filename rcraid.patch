diff -r -U3 driver_sdk/install new/driver_sdk/install
--- driver_sdk/install	2016-12-15 20:27:16.000000000 +0100
+++ new/driver_sdk/install	2018-06-30 17:11:28.196601864 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 
 #  Script to install the RAIDCore drivers from the SDK for supported platforms
 #  (RedHat and SuSE). 
diff -r -U3 driver_sdk/src/common_shell new/driver_sdk/src/common_shell
--- driver_sdk/src/common_shell	2016-12-15 20:27:22.000000000 +0100
+++ new/driver_sdk/src/common_shell	2018-06-30 17:12:37.584197823 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 
 # Common shell routines used by the top level install script (SDK and driver
 # disks) and also from the OS specific scripts in the SDK (also contains
diff -r -U3 driver_sdk/src/install_rh new/driver_sdk/src/install_rh
--- driver_sdk/src/install_rh	2016-12-15 20:27:24.000000000 +0100
+++ new/driver_sdk/src/install_rh	2018-06-30 17:12:54.536064242 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh 
+#!/bin/bash
 
 #  Script to install the driver into the /lib/modules tree for RedHat distros. 
 #  By default new drivers will be installed for the currently running kernel.
diff -r -U3 driver_sdk/src/install_suse new/driver_sdk/src/install_suse
--- driver_sdk/src/install_suse	2016-12-15 20:27:24.000000000 +0100
+++ new/driver_sdk/src/install_suse	2018-06-30 17:13:07.755952816 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh 
+#!/bin/bash
 
 #  Script to install the driver into the /lib/modules tree for SuSE distros. 
 #  By default new drivers will be installed for the currently running kernel.
diff -r -U3 driver_sdk/src/rc_init.c new/driver_sdk/src/rc_init.c
--- driver_sdk/src/rc_init.c	2016-12-15 20:27:32.000000000 +0100
+++ new/driver_sdk/src/rc_init.c	2018-06-12 22:19:05.274770329 +0200
@@ -169,7 +169,11 @@
 void        rc_dump_scp(struct scsi_cmnd * scp);
 const char *rc_info(struct Scsi_Host *host_ptr);
 void        rc_timeout(int to);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)
 void        rc_timeout_done(unsigned long data);
+#else
+void        rc_timeout_done(struct timer_list * t);
+#endif
 static int  rc_slave_cfg(struct scsi_device *sdev);
 int         rc_bios_params(struct scsi_device *sdev, struct block_device *bdev,
 			   sector_t capacity, int geom[]);
@@ -2383,12 +2387,20 @@
 }
 
 void
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)
 rc_timeout_done(unsigned long data)
+#else
+rc_timeout_done(struct timer_list *t)
+#endif
 {
 	rc_softstate_t *state;
-
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)
 	state = (rc_softstate_t *)data;
 	init_timer(&state->rc_timeout);
+#else
+	state = from_timer(state, t, rc_timeout);
+	timer_setup(&state->rc_timeout, rc_timeout_done, 0);
+#endif
 	up(&state->rc_timeout_sema);
 }
 
@@ -2402,10 +2414,15 @@
 	 * set up timeout
 	 */
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)
 	init_timer(&state->rc_timeout);
 	state->rc_timeout.expires = jiffies  + to;
 	state->rc_timeout.data = (unsigned long)state;
 	state->rc_timeout.function = rc_timeout_done;
+#else
+	timer_setup(&state->rc_timeout, rc_timeout_done, 0);
+	state->rc_timeout.expires = jiffies + to;
+#endif
 	add_timer(&state->rc_timeout);
 	down(&state->rc_timeout_sema);
 }
diff -r -U3 driver_sdk/src/rc_mem_ops.c new/driver_sdk/src/rc_mem_ops.c
--- driver_sdk/src/rc_mem_ops.c	2016-12-15 20:27:34.000000000 +0100
+++ new/driver_sdk/src/rc_mem_ops.c	2018-06-12 22:19:05.342770084 +0200
@@ -19,6 +19,7 @@
  *
  ****************************************************************************/
 
+#include "linux/signal.h"
 #include "linux/vmalloc.h"
 #include "linux/wait.h"
 #include "linux/sched.h"
diff -r -U3 driver_sdk/src/rc_msg.c new/driver_sdk/src/rc_msg.c
--- driver_sdk/src/rc_msg.c	2016-12-15 20:27:34.000000000 +0100
+++ new/driver_sdk/src/rc_msg.c	2018-06-12 22:19:05.350770055 +0200
@@ -37,10 +37,18 @@
 
 void rc_msg_send_srb_function (rc_softstate_t *state, int function_code);
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)
 void rc_msg_timer(unsigned long data);
+#else
+void rc_msg_timer(struct timer_list * t);
+#endif
 
 void rc_msg_timeout(int to);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)
 void rc_msg_timeout_done(unsigned long data);
+#else
+void rc_msg_timeout_done(struct timer_list * t);
+#endif
 
 void rc_msg_isr(rc_adapter_t *adapter);
 void rc_msg_schedule_dpc(void);
@@ -1226,10 +1234,15 @@
 	/*
 	 * intialize the periodic timer for the OSIC
 	 */          
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 
 	init_timer(&state->timer);
 	state->timer.expires = jiffies  + state->timer_interval ;
 	state->timer.data = (unsigned long)state;
 	state->timer.function = rc_msg_timer;
+#else
+	timer_setup(&state->timer, rc_msg_timer, 0);
+	state->timer.expires = jiffies + state->timer_interval;	
+#endif
 	state->state |= ENABLE_TIMER;
  
 	add_timer(&state->timer);
@@ -1257,13 +1270,20 @@
 	return(0);
 }
 void
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 
 rc_msg_timer(unsigned long data)
+#else
+rc_msg_timer(struct timer_list * t)
+#endif
 {
 	rc_softstate_t *state;
 	rc_send_arg_t    args;
 
-
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 
 	state = (rc_softstate_t *)data;
+#else
+	state = from_timer(state, t, timer);
+#endif
 
 	if ((state->state & ENABLE_TIMER) == 0)
 		return;
@@ -1271,10 +1291,15 @@
 	/*
 	 * set up timeout
 	 */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 	 
 	init_timer(&state->timer);
 	state->timer.expires = jiffies  + state->timer_interval;
 	state->timer.data = (unsigned long)state;
 	state->timer.function = rc_msg_timer;
+#else
+	timer_setup(&state->timer, rc_msg_timer,0);
+	state->timer.expires = jiffies + state->timer_interval;
+#endif
 	add_timer(&state->timer);
 
 	spin_lock(&state->osic_lock);
@@ -2342,12 +2367,21 @@
 
 
 void
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 	 
 rc_msg_timeout_done(unsigned long data)
+#else
+rc_msg_timeout_done(struct timer_list * t)
+#endif
 {
 	rc_softstate_t *state;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 	 
 	state = (rc_softstate_t *)data;
 	init_timer(&state->msg_timeout);
+#else
+	state = from_timer(state, t, msg_timeout);
+	timer_setup(&state->msg_timeout, rc_msg_timeout_done, 0);
+#endif
 	up(&state->msg_timeout_sema);
 }
 
@@ -2361,10 +2395,15 @@
 	 * set up timeout
 	 */
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 	 
 	init_timer(&state->msg_timeout);
 	state->msg_timeout.expires = jiffies  + to;
 	state->msg_timeout.data = (unsigned long)state;
 	state->msg_timeout.function = rc_msg_timeout_done;
+#else
+	timer_setup(&state->msg_timeout, rc_msg_timeout_done, 0);
+	state->msg_timeout.expires = jiffies  + to;	
+#endif
 	add_timer(&state->msg_timeout);
 	down(&state->msg_timeout_sema);
 
diff -r -U3 driver_sdk/src/uninstall_rh new/driver_sdk/src/uninstall_rh
--- driver_sdk/src/uninstall_rh	2016-12-15 20:27:38.000000000 +0100
+++ new/driver_sdk/src/uninstall_rh	2018-06-30 17:13:37.483682373 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 
 #
 # Script to remove the driver(s) from an existing SuSE linux install
diff -r -U3 driver_sdk/src/uninstall_suse new/driver_sdk/src/uninstall_suse
--- driver_sdk/src/uninstall_suse	2016-12-15 20:27:38.000000000 +0100
+++ new/driver_sdk/src/uninstall_suse	2018-06-30 17:13:47.011590619 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh 
+#!/bin/bash
 #
 # Script to remove the driver(s) from an existing SuSE linux install
 # 
diff -r -U3 driver_sdk/uninstall new/driver_sdk/uninstall
--- driver_sdk/uninstall	2016-12-15 20:27:18.000000000 +0100
+++ new/driver_sdk/uninstall	2018-06-30 17:11:38.232560682 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 #
 #  Script to uninstall the RAIDCore drivers from the SDK for supported platforms
 #  (RedHat and SuSE). 
